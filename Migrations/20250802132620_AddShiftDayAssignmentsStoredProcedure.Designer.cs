// <auto-generated />
using System;
using Klacks.Api.Domain.Common;
using Klacks.Api.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Klacks.Api.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20250802132620_AddShiftDayAssignmentsStoredProcedure")]
    partial class AddShiftDayAssignmentsStoredProcedure
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence<int>("client_idnumber_seq", "public");

            modelBuilder.Entity("Klacks.Api.Domain.Models.Associations.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_time");

                    b.Property<string>("CurrentUserCreated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_created");

                    b.Property<string>("CurrentUserDeleted")
                        .HasColumnType("text")
                        .HasColumnName("current_user_deleted");

                    b.Property<string>("CurrentUserUpdated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_updated");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("Lft")
                        .HasColumnType("integer")
                        .HasColumnName("lft");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("Parent")
                        .HasColumnType("uuid")
                        .HasColumnName("parent");

                    b.Property<int>("Rgt")
                        .HasColumnType("integer")
                        .HasColumnName("rgt");

                    b.Property<Guid?>("Root")
                        .HasColumnType("uuid")
                        .HasColumnName("root");

                    b.Property<Guid?>("ShiftId")
                        .HasColumnType("uuid")
                        .HasColumnName("shift_id");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_time");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("valid_from");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("valid_until");

                    b.HasKey("Id")
                        .HasName("pk_group");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_group_name");

                    b.HasIndex("ShiftId")
                        .HasDatabaseName("ix_group_shift_id");

                    b.ToTable("group", (string)null);
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Associations.GroupItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_time");

                    b.Property<string>("CurrentUserCreated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_created");

                    b.Property<string>("CurrentUserDeleted")
                        .HasColumnType("text")
                        .HasColumnName("current_user_deleted");

                    b.Property<string>("CurrentUserUpdated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_updated");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid?>("ShiftId")
                        .HasColumnType("uuid")
                        .HasColumnName("shift_id");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_time");

                    b.HasKey("Id")
                        .HasName("pk_group_item");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_group_item_group_id");

                    b.HasIndex("ShiftId")
                        .HasDatabaseName("ix_group_item_shift_id");

                    b.HasIndex("ClientId", "GroupId", "ShiftId")
                        .HasDatabaseName("ix_group_item_client_id_group_id_shift_id");

                    b.ToTable("group_item", (string)null);
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Associations.GroupVisibility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("app_user_id");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_time");

                    b.Property<string>("CurrentUserCreated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_created");

                    b.Property<string>("CurrentUserDeleted")
                        .HasColumnType("text")
                        .HasColumnName("current_user_deleted");

                    b.Property<string>("CurrentUserUpdated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_updated");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_time");

                    b.HasKey("Id")
                        .HasName("pk_group_visibility");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_group_visibility_group_id");

                    b.HasIndex("AppUserId", "GroupId")
                        .HasDatabaseName("ix_group_visibility_app_user_id_group_id");

                    b.ToTable("group_visibility", (string)null);
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Associations.Membership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_time");

                    b.Property<string>("CurrentUserCreated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_created");

                    b.Property<string>("CurrentUserDeleted")
                        .HasColumnType("text")
                        .HasColumnName("current_user_deleted");

                    b.Property<string>("CurrentUserUpdated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_updated");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_time");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("valid_from");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("valid_until");

                    b.HasKey("Id")
                        .HasName("pk_membership");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasDatabaseName("ix_membership_client_id");

                    b.ToTable("membership", (string)null);
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Authentification.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AspNetUsersId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("asp_net_users_id");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiry_date");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("token");

                    b.HasKey("Id")
                        .HasName("pk_refresh_token");

                    b.ToTable("refresh_token", (string)null);
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.CalendarSelections.CalendarSelection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_time");

                    b.Property<string>("CurrentUserCreated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_created");

                    b.Property<string>("CurrentUserDeleted")
                        .HasColumnType("text")
                        .HasColumnName("current_user_deleted");

                    b.Property<string>("CurrentUserUpdated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_updated");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_time");

                    b.HasKey("Id")
                        .HasName("pk_calendar_selection");

                    b.ToTable("calendar_selection", (string)null);
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.CalendarSelections.SelectedCalendar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CalendarSelectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("calendar_selection_id");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_time");

                    b.Property<string>("CurrentUserCreated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_created");

                    b.Property<string>("CurrentUserDeleted")
                        .HasColumnType("text")
                        .HasColumnName("current_user_deleted");

                    b.Property<string>("CurrentUserUpdated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_updated");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_time");

                    b.HasKey("Id")
                        .HasName("pk_selected_calendar");

                    b.HasIndex("CalendarSelectionId")
                        .HasDatabaseName("ix_selected_calendar_calendar_selection_id");

                    b.HasIndex("State", "Country", "CalendarSelectionId")
                        .HasDatabaseName("ix_selected_calendar_state_country_calendar_selection_id");

                    b.ToTable("selected_calendar", (string)null);
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Histories.History", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_time");

                    b.Property<string>("CurrentUserCreated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_created");

                    b.Property<string>("CurrentUserDeleted")
                        .HasColumnType("text")
                        .HasColumnName("current_user_deleted");

                    b.Property<string>("CurrentUserUpdated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_updated");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("NewData")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("new_data");

                    b.Property<string>("OldData")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("old_data");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_time");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("valid_from");

                    b.HasKey("Id")
                        .HasName("pk_history");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_history_client_id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_history_is_deleted");

                    b.ToTable("history", (string)null);
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Schedules.Absence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_time");

                    b.Property<string>("CurrentUserCreated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_created");

                    b.Property<string>("CurrentUserDeleted")
                        .HasColumnType("text")
                        .HasColumnName("current_user_deleted");

                    b.Property<string>("CurrentUserUpdated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_updated");

                    b.Property<int>("DefaultLength")
                        .HasColumnType("integer")
                        .HasColumnName("default_length");

                    b.Property<double>("DefaultValue")
                        .HasColumnType("double precision")
                        .HasColumnName("default_value");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("HideInGantt")
                        .HasColumnType("boolean")
                        .HasColumnName("hide_in_gantt");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("Undeletable")
                        .HasColumnType("boolean")
                        .HasColumnName("undeletable");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_time");

                    b.Property<bool>("WithHoliday")
                        .HasColumnType("boolean")
                        .HasColumnName("with_holiday");

                    b.Property<bool>("WithSaturday")
                        .HasColumnType("boolean")
                        .HasColumnName("with_saturday");

                    b.Property<bool>("WithSunday")
                        .HasColumnType("boolean")
                        .HasColumnName("with_sunday");

                    b.HasKey("Id")
                        .HasName("pk_absence");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_absence_is_deleted");

                    b.ToTable("absence", (string)null);
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Schedules.Break", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AbsenceId")
                        .HasColumnType("uuid")
                        .HasColumnName("absence_id");

                    b.Property<Guid?>("BreakReasonId")
                        .HasColumnType("uuid")
                        .HasColumnName("break_reason_id");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_time");

                    b.Property<string>("CurrentUserCreated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_created");

                    b.Property<string>("CurrentUserDeleted")
                        .HasColumnType("text")
                        .HasColumnName("current_user_deleted");

                    b.Property<string>("CurrentUserUpdated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_updated");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<DateTime>("From")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("from");

                    b.Property<string>("Information")
                        .HasColumnType("text")
                        .HasColumnName("information");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("Until")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("until");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_time");

                    b.HasKey("Id")
                        .HasName("pk_break");

                    b.HasIndex("AbsenceId")
                        .HasDatabaseName("ix_break_absence_id");

                    b.HasIndex("BreakReasonId")
                        .HasDatabaseName("ix_break_break_reason_id");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_break_client_id");

                    b.HasIndex("IsDeleted", "AbsenceId", "ClientId")
                        .HasDatabaseName("ix_break_is_deleted_absence_id_client_id");

                    b.ToTable("break", (string)null);
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Schedules.BreakReason", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_time");

                    b.Property<string>("CurrentUserCreated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_created");

                    b.Property<string>("CurrentUserDeleted")
                        .HasColumnType("text")
                        .HasColumnName("current_user_deleted");

                    b.Property<string>("CurrentUserUpdated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_updated");

                    b.Property<int>("DefaultLength")
                        .HasColumnType("integer")
                        .HasColumnName("default_length");

                    b.Property<double>("DefaultValue")
                        .HasColumnType("double precision")
                        .HasColumnName("default_value");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("HideInGantt")
                        .HasColumnType("boolean")
                        .HasColumnName("hide_in_gantt");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("Macro")
                        .HasColumnType("uuid")
                        .HasColumnName("macro");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool>("Undeletable")
                        .HasColumnType("boolean")
                        .HasColumnName("undeletable");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_time");

                    b.HasKey("Id")
                        .HasName("pk_break_reason");

                    b.HasIndex("IsDeleted", "Name")
                        .HasDatabaseName("ix_break_reason_is_deleted_name");

                    b.ToTable("break_reason", (string)null);
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Schedules.ClientScheduleDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<int>("CurrentMonth")
                        .HasColumnType("integer")
                        .HasColumnName("current_month");

                    b.Property<int>("CurrentYear")
                        .HasColumnType("integer")
                        .HasColumnName("current_year");

                    b.Property<int>("NeededRows")
                        .HasColumnType("integer")
                        .HasColumnName("needed_rows");

                    b.HasKey("Id")
                        .HasName("pk_client_schedule_detail");

                    b.HasIndex("ClientId", "CurrentYear", "CurrentMonth")
                        .HasDatabaseName("ix_client_schedule_detail_client_id_current_year_current_month");

                    b.ToTable("client_schedule_detail", (string)null);
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Schedules.Shift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("abbreviation");

                    b.Property<TimeOnly>("AfterShift")
                        .HasColumnType("time without time zone")
                        .HasColumnName("after_shift");

                    b.Property<TimeOnly>("BeforeShift")
                        .HasColumnType("time without time zone")
                        .HasColumnName("before_shift");

                    b.Property<TimeOnly>("BriefingTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("briefing_time");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_time");

                    b.Property<string>("CurrentUserCreated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_created");

                    b.Property<string>("CurrentUserDeleted")
                        .HasColumnType("text")
                        .HasColumnName("current_user_deleted");

                    b.Property<string>("CurrentUserUpdated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_updated");

                    b.Property<bool>("CuttingAfterMidnight")
                        .HasColumnType("boolean")
                        .HasColumnName("cutting_after_midnight");

                    b.Property<TimeOnly>("DebriefingTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("debriefing_time");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<TimeOnly>("EndShift")
                        .HasColumnType("time without time zone")
                        .HasColumnName("end_shift");

                    b.Property<DateOnly>("FromDate")
                        .HasColumnType("date")
                        .HasColumnName("from_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsFriday")
                        .HasColumnType("boolean")
                        .HasColumnName("is_friday");

                    b.Property<bool>("IsHoliday")
                        .HasColumnType("boolean")
                        .HasColumnName("is_holiday");

                    b.Property<bool>("IsMonday")
                        .HasColumnType("boolean")
                        .HasColumnName("is_monday");

                    b.Property<bool>("IsSaturday")
                        .HasColumnType("boolean")
                        .HasColumnName("is_saturday");

                    b.Property<bool>("IsSporadic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_sporadic");

                    b.Property<bool>("IsSunday")
                        .HasColumnType("boolean")
                        .HasColumnName("is_sunday");

                    b.Property<bool>("IsThursday")
                        .HasColumnType("boolean")
                        .HasColumnName("is_thursday");

                    b.Property<bool>("IsTimeRange")
                        .HasColumnType("boolean")
                        .HasColumnName("is_time_range");

                    b.Property<bool>("IsTuesday")
                        .HasColumnType("boolean")
                        .HasColumnName("is_tuesday");

                    b.Property<bool>("IsWednesday")
                        .HasColumnType("boolean")
                        .HasColumnName("is_wednesday");

                    b.Property<bool>("IsWeekdayOrHoliday")
                        .HasColumnType("boolean")
                        .HasColumnName("is_weekday_or_holiday");

                    b.Property<int?>("Lft")
                        .HasColumnType("integer")
                        .HasColumnName("lft");

                    b.Property<Guid?>("MacroId")
                        .HasColumnType("uuid")
                        .HasColumnName("macro_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("OriginalId")
                        .HasColumnType("uuid")
                        .HasColumnName("original_id");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<int?>("Rgt")
                        .HasColumnType("integer")
                        .HasColumnName("rgt");

                    b.Property<Guid?>("RootId")
                        .HasColumnType("uuid")
                        .HasColumnName("root_id");

                    b.Property<int>("ShiftType")
                        .HasColumnType("integer")
                        .HasColumnName("shift_type");

                    b.Property<int>("SporadicScope")
                        .HasColumnType("integer")
                        .HasColumnName("sporadic_scope");

                    b.Property<TimeOnly>("StartShift")
                        .HasColumnType("time without time zone")
                        .HasColumnName("start_shift");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("SumEmployees")
                        .HasColumnType("integer")
                        .HasColumnName("sum_employees");

                    b.Property<TimeOnly>("TravelTimeAfter")
                        .HasColumnType("time without time zone")
                        .HasColumnName("travel_time_after");

                    b.Property<TimeOnly>("TravelTimeBefore")
                        .HasColumnType("time without time zone")
                        .HasColumnName("travel_time_before");

                    b.Property<DateOnly?>("UntilDate")
                        .HasColumnType("date")
                        .HasColumnName("until_date");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_time");

                    b.Property<decimal>("WorkTime")
                        .HasColumnType("numeric")
                        .HasColumnName("work_time");

                    b.HasKey("Id")
                        .HasName("pk_shift");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_shift_client_id");

                    b.HasIndex("MacroId", "ClientId", "Status", "FromDate", "UntilDate")
                        .HasDatabaseName("ix_shift_macro_id_client_id_status_from_date_until_date");

                    b.ToTable("shift", (string)null);
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Schedules.Work", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_time");

                    b.Property<string>("CurrentUserCreated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_created");

                    b.Property<string>("CurrentUserDeleted")
                        .HasColumnType("text")
                        .HasColumnName("current_user_deleted");

                    b.Property<string>("CurrentUserUpdated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_updated");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<DateTime>("From")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("from");

                    b.Property<string>("Information")
                        .HasColumnType("text")
                        .HasColumnName("information");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsSealed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_sealed");

                    b.Property<Guid>("ShiftId")
                        .HasColumnType("uuid")
                        .HasColumnName("shift_id");

                    b.Property<DateTime>("Until")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("until");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_time");

                    b.HasKey("Id")
                        .HasName("pk_work");

                    b.HasIndex("ShiftId")
                        .HasDatabaseName("ix_work_shift_id");

                    b.HasIndex("ClientId", "ShiftId")
                        .HasDatabaseName("ix_work_client_id_shift_id");

                    b.ToTable("work", (string)null);
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Settings.CalendarRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("boolean")
                        .HasColumnName("is_mandatory");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean")
                        .HasColumnName("is_paid");

                    b.Property<string>("Rule")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rule");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<string>("SubRule")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sub_rule");

                    b.HasKey("Id")
                        .HasName("pk_calendar_rule");

                    b.HasIndex("State", "Country")
                        .HasDatabaseName("ix_calendar_rule_state_country");

                    b.ToTable("calendar_rule", (string)null);
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Settings.CommunicationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<int>("DefaultIndex")
                        .HasColumnType("integer")
                        .HasColumnName("default_index");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_communication_type");

                    b.ToTable("communication_type", (string)null);
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Settings.Countries", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("abbreviation");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_time");

                    b.Property<string>("CurrentUserCreated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_created");

                    b.Property<string>("CurrentUserDeleted")
                        .HasColumnType("text")
                        .HasColumnName("current_user_deleted");

                    b.Property<string>("CurrentUserUpdated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_updated");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("prefix");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_time");

                    b.HasKey("Id")
                        .HasName("pk_countries");

                    b.ToTable("countries", (string)null);
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Settings.Macro", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_time");

                    b.Property<string>("CurrentUserCreated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_created");

                    b.Property<string>("CurrentUserDeleted")
                        .HasColumnType("text")
                        .HasColumnName("current_user_deleted");

                    b.Property<string>("CurrentUserUpdated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_updated");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_time");

                    b.HasKey("Id")
                        .HasName("pk_macro");

                    b.HasIndex("IsDeleted", "Name")
                        .HasDatabaseName("ix_macro_is_deleted_name");

                    b.ToTable("macro", (string)null);
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Settings.MacroType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_macro_type");

                    b.ToTable("macro_type", (string)null);
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Settings.PostcodeCH", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("state");

                    b.Property<int>("Zip")
                        .HasColumnType("integer")
                        .HasColumnName("zip");

                    b.HasKey("Id")
                        .HasName("pk_postcode_ch");

                    b.ToTable("postcode_ch", (string)null);
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Settings.Settings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_settings");

                    b.ToTable("settings", (string)null);
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Settings.State", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("abbreviation");

                    b.Property<string>("CountryPrefix")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("country_prefix");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_time");

                    b.Property<string>("CurrentUserCreated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_created");

                    b.Property<string>("CurrentUserDeleted")
                        .HasColumnType("text")
                        .HasColumnName("current_user_deleted");

                    b.Property<string>("CurrentUserUpdated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_updated");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_time");

                    b.HasKey("Id")
                        .HasName("pk_state");

                    b.ToTable("state", (string)null);
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Settings.Vat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<decimal>("VATRate")
                        .HasColumnType("numeric")
                        .HasColumnName("vat_rate");

                    b.HasKey("Id")
                        .HasName("pk_vat");

                    b.ToTable("vat", (string)null);
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Staffs.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address_line1");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address_line2");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_time");

                    b.Property<string>("CurrentUserCreated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_created");

                    b.Property<string>("CurrentUserDeleted")
                        .HasColumnType("text")
                        .HasColumnName("current_user_deleted");

                    b.Property<string>("CurrentUserUpdated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_updated");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("street");

                    b.Property<string>("Street2")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("street2");

                    b.Property<string>("Street3")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("street3");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_time");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("valid_from");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("zip");

                    b.HasKey("Id")
                        .HasName("pk_address");

                    b.HasIndex("ClientId", "Street", "Street2", "Street3", "City", "IsDeleted")
                        .HasDatabaseName("ix_address_client_id_street_street2_street3_city_is_deleted");

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Staffs.Annotation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_time");

                    b.Property<string>("CurrentUserCreated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_created");

                    b.Property<string>("CurrentUserDeleted")
                        .HasColumnType("text")
                        .HasColumnName("current_user_deleted");

                    b.Property<string>("CurrentUserUpdated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_updated");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_time");

                    b.HasKey("Id")
                        .HasName("pk_annotation");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_annotation_client_id");

                    b.HasIndex("Note", "IsDeleted")
                        .HasDatabaseName("ix_annotation_note_is_deleted");

                    b.ToTable("annotation", (string)null);
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Staffs.AssignedGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_time");

                    b.Property<string>("CurrentUserCreated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_created");

                    b.Property<string>("CurrentUserDeleted")
                        .HasColumnType("text")
                        .HasColumnName("current_user_deleted");

                    b.Property<string>("CurrentUserUpdated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_updated");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_time");

                    b.HasKey("Id")
                        .HasName("pk_assigned_group");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_assigned_group_group_id");

                    b.HasIndex("ClientId", "GroupId")
                        .HasDatabaseName("ix_assigned_group_client_id_group_id");

                    b.ToTable("assigned_group", (string)null);
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Staffs.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birthdate");

                    b.Property<string>("Company")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("company");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_time");

                    b.Property<string>("CurrentUserCreated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_created");

                    b.Property<string>("CurrentUserDeleted")
                        .HasColumnType("text")
                        .HasColumnName("current_user_deleted");

                    b.Property<string>("CurrentUserUpdated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_updated");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<int>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<int>("IdNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_number")
                        .HasDefaultValueSql("nextval('public.client_idnumber_seq')");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("LegalEntity")
                        .HasColumnType("boolean")
                        .HasColumnName("legal_entity");

                    b.Property<string>("MaidenName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("maiden_name");

                    b.Property<Guid>("MembershipId")
                        .HasColumnType("uuid")
                        .HasColumnName("membership_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("PasswortResetToken")
                        .HasColumnType("text")
                        .HasColumnName("passwort_reset_token");

                    b.Property<string>("SecondName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("second_name");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_time");

                    b.HasKey("Id")
                        .HasName("pk_client");

                    b.HasIndex("FirstName", "SecondName", "Name", "MaidenName", "Company", "Gender", "Type", "LegalEntity", "IsDeleted")
                        .HasDatabaseName("ix_client_first_name_second_name_name_maiden_name_company_gend");

                    b.ToTable("client", (string)null);
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Staffs.Communication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_time");

                    b.Property<string>("CurrentUserCreated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_created");

                    b.Property<string>("CurrentUserDeleted")
                        .HasColumnType("text")
                        .HasColumnName("current_user_deleted");

                    b.Property<string>("CurrentUserUpdated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_updated");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("prefix");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_time");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_communication");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_communication_client_id");

                    b.HasIndex("Value", "IsDeleted")
                        .HasDatabaseName("ix_communication_value_is_deleted");

                    b.ToTable("communication", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("discriminator");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Authentification.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.HasDiscriminator().HasValue("AppUser");
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Associations.Group", b =>
                {
                    b.HasOne("Klacks.Api.Domain.Models.Schedules.Shift", null)
                        .WithMany("Groups")
                        .HasForeignKey("ShiftId")
                        .HasConstraintName("fk_group_shift_shift_id");
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Associations.GroupItem", b =>
                {
                    b.HasOne("Klacks.Api.Domain.Models.Staffs.Client", "Client")
                        .WithMany("GroupItems")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_group_item_client_client_id");

                    b.HasOne("Klacks.Api.Domain.Models.Associations.Group", "Group")
                        .WithMany("GroupItems")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_group_item_group_group_id");

                    b.HasOne("Klacks.Api.Domain.Models.Schedules.Shift", "Shift")
                        .WithMany()
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_group_item_shift_shift_id");

                    b.Navigation("Client");

                    b.Navigation("Group");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Associations.GroupVisibility", b =>
                {
                    b.HasOne("Klacks.Api.Domain.Models.Authentification.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_group_visibility_app_user_app_user_id");

                    b.HasOne("Klacks.Api.Domain.Models.Associations.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_group_visibility_group_group_id");

                    b.Navigation("AppUser");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Associations.Membership", b =>
                {
                    b.HasOne("Klacks.Api.Domain.Models.Staffs.Client", "Client")
                        .WithOne("Membership")
                        .HasForeignKey("Klacks.Api.Domain.Models.Associations.Membership", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_membership_client_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.CalendarSelections.SelectedCalendar", b =>
                {
                    b.HasOne("Klacks.Api.Domain.Models.CalendarSelections.CalendarSelection", "CalendarSelection")
                        .WithMany("SelectedCalendars")
                        .HasForeignKey("CalendarSelectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_selected_calendar_calendar_selection_calendar_selection_id");

                    b.Navigation("CalendarSelection");
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Histories.History", b =>
                {
                    b.HasOne("Klacks.Api.Domain.Models.Staffs.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_history_client_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Schedules.Absence", b =>
                {
                    b.OwnsOne("Klacks.Api.Domain.Common.MultiLanguage", "Description", b1 =>
                        {
                            b1.Property<Guid>("AbsenceId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("De")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("description_de");

                            b1.Property<string>("En")
                                .HasColumnType("text")
                                .HasColumnName("description_en");

                            b1.Property<string>("Fr")
                                .HasColumnType("text")
                                .HasColumnName("description_fr");

                            b1.Property<string>("It")
                                .HasColumnType("text")
                                .HasColumnName("description_it");

                            b1.HasKey("AbsenceId");

                            b1.ToTable("absence");

                            b1.WithOwner()
                                .HasForeignKey("AbsenceId")
                                .HasConstraintName("fk_absence_absence_id");
                        });

                    b.OwnsOne("Klacks.Api.Domain.Common.MultiLanguage", "Name", b1 =>
                        {
                            b1.Property<Guid>("AbsenceId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("De")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name_de");

                            b1.Property<string>("En")
                                .HasColumnType("text")
                                .HasColumnName("name_en");

                            b1.Property<string>("Fr")
                                .HasColumnType("text")
                                .HasColumnName("name_fr");

                            b1.Property<string>("It")
                                .HasColumnType("text")
                                .HasColumnName("name_it");

                            b1.HasKey("AbsenceId");

                            b1.ToTable("absence");

                            b1.WithOwner()
                                .HasForeignKey("AbsenceId")
                                .HasConstraintName("fk_absence_absence_id");
                        });

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Schedules.Break", b =>
                {
                    b.HasOne("Klacks.Api.Domain.Models.Schedules.Absence", "Absence")
                        .WithMany()
                        .HasForeignKey("AbsenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_break_absence_absence_id");

                    b.HasOne("Klacks.Api.Domain.Models.Schedules.BreakReason", "BreakReason")
                        .WithMany()
                        .HasForeignKey("BreakReasonId")
                        .HasConstraintName("fk_break_break_reason_break_reason_id");

                    b.HasOne("Klacks.Api.Domain.Models.Staffs.Client", "Client")
                        .WithMany("Breaks")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_break_client_client_id");

                    b.Navigation("Absence");

                    b.Navigation("BreakReason");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Schedules.Shift", b =>
                {
                    b.HasOne("Klacks.Api.Domain.Models.Staffs.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_shift_client_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Schedules.Work", b =>
                {
                    b.HasOne("Klacks.Api.Domain.Models.Staffs.Client", "Client")
                        .WithMany("Works")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_work_client_client_id");

                    b.HasOne("Klacks.Api.Domain.Models.Schedules.Shift", "Shift")
                        .WithMany()
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_work_shift_shift_id");

                    b.Navigation("Client");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Settings.CalendarRule", b =>
                {
                    b.OwnsOne("Klacks.Api.Domain.Common.MultiLanguage", "Description", b1 =>
                        {
                            b1.Property<Guid>("CalendarRuleId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("De")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("description_de");

                            b1.Property<string>("En")
                                .HasColumnType("text")
                                .HasColumnName("description_en");

                            b1.Property<string>("Fr")
                                .HasColumnType("text")
                                .HasColumnName("description_fr");

                            b1.Property<string>("It")
                                .HasColumnType("text")
                                .HasColumnName("description_it");

                            b1.HasKey("CalendarRuleId");

                            b1.ToTable("calendar_rule");

                            b1.WithOwner()
                                .HasForeignKey("CalendarRuleId")
                                .HasConstraintName("fk_calendar_rule_calendar_rule_id");
                        });

                    b.OwnsOne("Klacks.Api.Domain.Common.MultiLanguage", "Name", b1 =>
                        {
                            b1.Property<Guid>("CalendarRuleId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("De")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name_de");

                            b1.Property<string>("En")
                                .HasColumnType("text")
                                .HasColumnName("name_en");

                            b1.Property<string>("Fr")
                                .HasColumnType("text")
                                .HasColumnName("name_fr");

                            b1.Property<string>("It")
                                .HasColumnType("text")
                                .HasColumnName("name_it");

                            b1.HasKey("CalendarRuleId");

                            b1.ToTable("calendar_rule");

                            b1.WithOwner()
                                .HasForeignKey("CalendarRuleId")
                                .HasConstraintName("fk_calendar_rule_calendar_rule_id");
                        });

                    b.Navigation("Description");

                    b.Navigation("Name");
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Settings.Countries", b =>
                {
                    b.OwnsOne("Klacks.Api.Domain.Common.MultiLanguage", "Name", b1 =>
                        {
                            b1.Property<Guid>("CountriesId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("De")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name_de");

                            b1.Property<string>("En")
                                .HasColumnType("text")
                                .HasColumnName("name_en");

                            b1.Property<string>("Fr")
                                .HasColumnType("text")
                                .HasColumnName("name_fr");

                            b1.Property<string>("It")
                                .HasColumnType("text")
                                .HasColumnName("name_it");

                            b1.HasKey("CountriesId");

                            b1.ToTable("countries");

                            b1.WithOwner()
                                .HasForeignKey("CountriesId")
                                .HasConstraintName("fk_countries_countries_id");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Settings.Macro", b =>
                {
                    b.OwnsOne("Klacks.Api.Domain.Common.MultiLanguage", "Description", b1 =>
                        {
                            b1.Property<Guid>("MacroId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("De")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("description_de");

                            b1.Property<string>("En")
                                .HasColumnType("text")
                                .HasColumnName("description_en");

                            b1.Property<string>("Fr")
                                .HasColumnType("text")
                                .HasColumnName("description_fr");

                            b1.Property<string>("It")
                                .HasColumnType("text")
                                .HasColumnName("description_it");

                            b1.HasKey("MacroId");

                            b1.ToTable("macro");

                            b1.WithOwner()
                                .HasForeignKey("MacroId")
                                .HasConstraintName("fk_macro_macro_id");
                        });

                    b.Navigation("Description")
                        .IsRequired();
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Settings.State", b =>
                {
                    b.OwnsOne("Klacks.Api.Domain.Common.MultiLanguage", "Name", b1 =>
                        {
                            b1.Property<Guid>("StateId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("De")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name_de");

                            b1.Property<string>("En")
                                .HasColumnType("text")
                                .HasColumnName("name_en");

                            b1.Property<string>("Fr")
                                .HasColumnType("text")
                                .HasColumnName("name_fr");

                            b1.Property<string>("It")
                                .HasColumnType("text")
                                .HasColumnName("name_it");

                            b1.HasKey("StateId");

                            b1.ToTable("state");

                            b1.WithOwner()
                                .HasForeignKey("StateId")
                                .HasConstraintName("fk_state_state_id");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Staffs.Address", b =>
                {
                    b.HasOne("Klacks.Api.Domain.Models.Staffs.Client", "Client")
                        .WithMany("Addresses")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_address_client_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Staffs.Annotation", b =>
                {
                    b.HasOne("Klacks.Api.Domain.Models.Staffs.Client", "Client")
                        .WithMany("Annotations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_annotation_client_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Staffs.AssignedGroup", b =>
                {
                    b.HasOne("Klacks.Api.Domain.Models.Staffs.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_assigned_group_client_client_id");

                    b.HasOne("Klacks.Api.Domain.Models.Associations.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_assigned_group_group_group_id");

                    b.Navigation("Client");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Staffs.Communication", b =>
                {
                    b.HasOne("Klacks.Api.Domain.Models.Staffs.Client", "Client")
                        .WithMany("Communications")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_communication_client_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Associations.Group", b =>
                {
                    b.Navigation("GroupItems");
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.CalendarSelections.CalendarSelection", b =>
                {
                    b.Navigation("SelectedCalendars");
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Schedules.Shift", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Klacks.Api.Domain.Models.Staffs.Client", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Annotations");

                    b.Navigation("Breaks");

                    b.Navigation("Communications");

                    b.Navigation("GroupItems");

                    b.Navigation("Membership");

                    b.Navigation("Works");
                });
#pragma warning restore 612, 618
        }
    }
}
