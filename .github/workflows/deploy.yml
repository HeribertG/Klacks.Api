# .github/workflows/deploy.yml f√ºr Klacks.Api
name: Deploy Klacks.Api to Hetzner

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT || 22 }}
        script: |
          set -e
          echo "üöÄ Deploying Klacks.Api..."
          
          # Navigate to correct directory
          cd /root/apps
          
          # Update Klacks.Api Repository
          if [ -d "Klacks.Api" ]; then
            echo "üì¶ Updating Klacks.Api..."
            cd Klacks.Api
            # Get current branch name
            CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
            echo "Current branch: $CURRENT_BRANCH"
            # Force pull - √ºberschreibt lokale √Ñnderungen
            git fetch origin
            git reset --hard origin/$CURRENT_BRANCH
            cd ..
          else
            echo "üì¶ Cloning Klacks.Api..."
            git clone https://github.com/HeribertG/Klacks.Api.git
          fi
          
          # Check Docker Compose version
          if command -v docker-compose &> /dev/null; then
            COMPOSE_CMD="docker-compose"
          else
            COMPOSE_CMD="docker compose"
          fi
          echo "Using: $COMPOSE_CMD"
          
          # Rebuild and restart only API service
          echo "üî® Building Klacks.Api..."
          $COMPOSE_CMD build klacks-api --no-cache
          
          echo "üîÑ Restarting Klacks.Api..."
          $COMPOSE_CMD up -d klacks-api
          
          echo "‚úÖ Klacks.Api deployment completed!"
          
          # Status check
          echo "üìä Service status:"
          $COMPOSE_CMD ps klacks-api
          
          # Health Check
          sleep 15
          echo "üè• Health Check for Klacks.Api..."
          
          # Check if service is running
          if $COMPOSE_CMD ps klacks-api | grep -q "Up"; then
            echo "‚úÖ Container is running"
          else
            echo "‚ùå Container is not running"
            $COMPOSE_CMD logs klacks-api --tail=20
            exit 1
          fi
          
          # Check HTTP response (API might have different endpoints)
          if curl -f -s -o /dev/null -w "%{http_code}" http://localhost:5000/api/values 2>/dev/null | grep -q "200\|401\|404"; then
            echo "‚úÖ Klacks.Api is responding on port 5000"
          elif curl -f -s -o /dev/null -w "%{http_code}" http://localhost:5000/swagger 2>/dev/null | grep -q "200\|301\|302"; then
            echo "‚úÖ Klacks.Api Swagger is accessible"
          else
            echo "‚ö†Ô∏è  API endpoints not directly accessible (might be normal for secured APIs)"
          fi
          
          # Check database connectivity via container logs
          echo "üîç Checking for database connection errors..."
          if $COMPOSE_CMD logs klacks-api --tail=50 | grep -i "error\|exception" | grep -i "database\|postgres"; then
            echo "‚ùå Database connection errors found!"
            $COMPOSE_CMD logs klacks-api --tail=30
            exit 1
          else
            echo "‚úÖ No database connection errors detected"
          fi