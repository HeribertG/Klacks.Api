using Klacks.Api.Application.Commands.Groups;
using Klacks.Api.Application.Interfaces;
using Klacks.Api.Application.Services;
using Klacks.Api.Presentation.DTOs.Associations;
using MediatR;

namespace Klacks.Api.Application.Handlers.Groups;

/// <summary>
/// CQRS Command Handler for moving groups in the hierarchy
/// Refactored to use Application Service following Clean Architecture
/// </summary>
public class MoveGroupNodeCommandHandler : IRequestHandler<MoveGroupNodeCommand, GroupResource>
{
    private readonly GroupApplicationService _groupApplicationService;
    private readonly IUnitOfWork _unitOfWork;
    private readonly ILogger<MoveGroupNodeCommandHandler> _logger;

    public MoveGroupNodeCommandHandler(
        GroupApplicationService groupApplicationService,
        IUnitOfWork unitOfWork,
        ILogger<MoveGroupNodeCommandHandler> logger)
    {
        _groupApplicationService = groupApplicationService;
        _unitOfWork = unitOfWork;
        _logger = logger;
    }

    public async Task<GroupResource> Handle(MoveGroupNodeCommand request, CancellationToken cancellationToken)
    {
        using var transaction = await _unitOfWork.BeginTransactionAsync();
        try
        {
            // Clean Architecture: Delegate complex tree operations to Application Service
            var result = await _groupApplicationService.MoveGroupNodeAsync(request.NodeId, request.NewParentId, cancellationToken);
            
            await _unitOfWork.CompleteAsync();
            await _unitOfWork.CommitTransactionAsync(transaction);

            return result;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error when moving the node {NodeId} to parent {NewParentId}", request.NodeId, request.NewParentId);
            await _unitOfWork.RollbackTransactionAsync(transaction);
            throw;
        }
    }
}