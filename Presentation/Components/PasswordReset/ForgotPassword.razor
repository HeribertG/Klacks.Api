@page "/forgot-password"
@using Klacks.Api.Application.Commands.Accounts
@using MediatR
@using Klacks.Api.Presentation.DTOs.Registrations
@using Microsoft.JSInterop
@inject IMediator Mediator

<PageTitle>Forgot Password - Klacks</PageTitle>

<div class="password-reset-container">
    <div class="password-reset-card">
        <div class="password-reset-logo">
            <i class="fas fa-key"></i>
        </div>
        
        <h2 class="password-reset-title">Forgot Password?</h2>
        <p class="password-reset-subtitle">
            Enter your email address and we'll send you a link to reset your password.
        </p>

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success">
                <i class="fas fa-check-circle"></i>
                @successMessage
            </div>
        }

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">
                <i class="fas fa-exclamation-circle"></i>
                @errorMessage
            </div>
        }

        <EditForm Model="@model" OnValidSubmit="@HandleSubmit">
            <DataAnnotationsValidator />
            
            <div class="form-group">
                <label for="email" class="form-label">Email Address</label>
                <InputText id="email" 
                          class="form-control" 
                          @bind-Value="@model.Email" 
                          placeholder="your.email@example.com"
                          disabled="@isLoading" />
                <ValidationMessage For="@(() => model.Email)" class="validation-message" />
            </div>

            <div class="form-group">
                <button type="submit" 
                        class="btn btn-primary" 
                        disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span class="loading-text">Sending link...</span>
                    }
                    else
                    {
                        <i class="fas fa-paper-plane"></i>
                        <span>Send Reset Link</span>
                    }
                </button>
            </div>
        </EditForm>

        <div class="mt-4">
            <a href="/login" class="btn btn-secondary">
                <i class="fas fa-arrow-left"></i> Back to Login
            </a>
        </div>
    </div>
</div>

@code {
    private RequestPasswordResetResource model = new();
    private string successMessage = string.Empty;
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    private async Task HandleSubmit()
    {
        isLoading = true;
        successMessage = string.Empty;
        errorMessage = string.Empty;
        
        try
        {
            var result = await Mediator.Send(new RequestPasswordResetCommand(model.Email));
            
            if (result.Success)
            {
                successMessage = result.Messages ?? "If this email address exists in our system, a password reset link has been sent.";
                model = new RequestPasswordResetResource(); // Reset form
            }
            else
            {
                errorMessage = result.Messages ?? "An error occurred. Please try again later.";
            }
        }
        catch (Exception)
        {
            errorMessage = "An unexpected error occurred. Please try again later.";
        }
        finally
        {
            isLoading = false;
        }
    }
}