@using Klacks.Api.Presentation.DTOs.Registrations
@using Microsoft.AspNetCore.Components
@inject IJSRuntime JSRuntime

<div class="password-reset-container">
    <div class="password-reset-card">
        <div class="password-reset-logo">
            <i class="fas fa-lock"></i>
        </div>
        
        <h2 class="password-reset-title">Set New Password</h2>
        <p class="password-reset-subtitle">
            Please enter your new password for token: @Token
        </p>

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success">
                <i class="fas fa-check-circle"></i>
                @successMessage
                <div class="mt-3">
                    <a href="/login" class="btn btn-success">
                        <i class="fas fa-sign-in-alt"></i> Login Now
                    </a>
                </div>
            </div>
        }
        else
        {
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">
                    <i class="fas fa-exclamation-circle"></i>
                    @errorMessage
                </div>
            }

            <EditForm Model="@model" OnValidSubmit="@HandleSubmit">
                <DataAnnotationsValidator />
                
                <div class="form-group">
                    <label for="password" class="form-label">New Password</label>
                    <div class="input-group">
                        <input id="password" 
                               type="@(showPassword ? "text" : "password")"
                               class="form-control" 
                               @bind="model.Password" 
                               @bind:event="oninput"
                               placeholder="At least 8 characters"
                               disabled="@isLoading" />
                        <button type="button" 
                                class="btn btn-outline-secondary" 
                                @onclick="TogglePasswordVisibility"
                                disabled="@isLoading"
                                title="@(showPassword ? "Hide password" : "Show password")">
                            <i class="fas @(showPassword ? "fa-eye-slash" : "fa-eye")"></i>
                        </button>
                    </div>
                    <ValidationMessage For="@(() => model.Password)" class="validation-message" />
                    <small class="form-text text-muted">
                        At least 8 characters, with numbers and special characters.
                    </small>
                </div>

                <div class="form-group">
                    <label for="confirmPassword" class="form-label">Confirm Password</label>
                    <InputText id="confirmPassword" 
                              type="password"
                              class="form-control" 
                              @bind-Value="@confirmPassword" 
                              placeholder="Repeat password"
                              disabled="@isLoading" />
                    @if (!string.IsNullOrEmpty(confirmPassword) && confirmPassword != model.Password)
                    {
                        <span class="validation-message">Passwords do not match.</span>
                    }
                </div>

                <div class="form-group">
                    <button type="submit" 
                            class="btn btn-primary" 
                            disabled="@(isLoading || string.IsNullOrEmpty(model.Password) || confirmPassword != model.Password)">
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span class="loading-text">Setting password...</span>
                        }
                        else
                        {
                            <i class="fas fa-save"></i>
                            <span>Reset Password</span>
                        }
                    </button>
                </div>
            </EditForm>

            <div class="mt-4">
                <a href="/login" class="btn btn-secondary">
                    <i class="fas fa-arrow-left"></i> Back to Login
                </a>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public string? Token { get; set; }

    private ResetPasswordResource model = new();
    private string confirmPassword = string.Empty;
    private string successMessage = string.Empty;
    private string errorMessage = string.Empty;
    private bool isLoading = false;
    private bool showPassword = false;

    protected override void OnInitialized()
    {
        model.Token = Token;
    }

    private async Task HandleSubmit()
    {
        if (confirmPassword != model.Password)
        {
            errorMessage = "Passwords do not match.";
            return;
        }

        isLoading = true;
        errorMessage = string.Empty;
        
        try
        {
            var httpClient = new HttpClient { BaseAddress = new Uri("https://localhost:5001") };
            var response = await httpClient.PostAsJsonAsync("/api/v1/backend/accounts/ResetPassword", model);
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<dynamic>();
                successMessage = "Your password has been successfully reset. You can now log in with your new password.";
            }
            else
            {
                errorMessage = "Error resetting password. Please check your input or request a new link.";
            }
        }
        catch (Exception)
        {
            errorMessage = "An unexpected error occurred. Please try again later.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }
}