@page "/reset-password"
@using Klacks.Api.Application.Commands.Accounts
@using Klacks.Api.Application.Queries.Accounts
@using MediatR
@using Klacks.Api.Presentation.DTOs.Registrations
@using Microsoft.AspNetCore.Components
@using Klacks.Api.Presentation.Services
@inject IMediator Mediator
@inject NavigationManager Navigation
@inject IPasswordGeneratorService PasswordGenerator
@inject IJSRuntime JSRuntime

<PageTitle>Reset Password - Klacks</PageTitle>

<div class="password-reset-container">
    <div class="password-reset-card">
        @if (isTokenValid == null)
        {
            <!-- Loading state -->
            <div class="text-center">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-3">Validating token...</p>
            </div>
        }
        else if (isTokenValid == false)
        {
            <!-- Invalid or expired token -->
            <div class="expired-icon">
                <i class="fas fa-times-circle"></i>
            </div>
            <h2 class="password-reset-title">Link Invalid or Expired</h2>
            <p class="password-reset-subtitle">
                This password reset link is invalid or has already expired.
                Please request a new link.
            </p>
            <div class="mt-4">
                <a href="/forgot-password" class="btn btn-primary">
                    <i class="fas fa-redo"></i> Request New Link
                </a>
                <a href="/login" class="btn btn-secondary ms-2">
                    <i class="fas fa-arrow-left"></i> Back to Login
                </a>
            </div>
        }
        else
        {
            <!-- Valid token - show reset form -->
            <div class="password-reset-logo">
                <i class="fas fa-lock"></i>
            </div>
            
            <h2 class="password-reset-title">Set New Password</h2>
            <p class="password-reset-subtitle">
                Please enter your new password.
            </p>

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success">
                    <i class="fas fa-check-circle"></i>
                    @successMessage
                    <div class="mt-3">
                        <a href="/login" class="btn btn-success">
                            <i class="fas fa-sign-in-alt"></i> Login Now
                        </a>
                    </div>
                </div>
            }
            else
            {
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger">
                        <i class="fas fa-exclamation-circle"></i>
                        @errorMessage
                    </div>
                }

                <EditForm Model="@model" OnValidSubmit="@HandleSubmit">
                    <DataAnnotationsValidator />
                    
                    <div class="form-group">
                        <label for="password" class="form-label">New Password</label>
                        <div class="input-group">
                            <input id="password" 
                                   type="@(showPassword ? "text" : "password")"
                                   class="form-control" 
                                   @bind="model.Password" 
                                   @bind:event="oninput"
                                   placeholder="At least 8 characters"
                                   disabled="@isLoading" />
                            <button type="button" 
                                    class="btn btn-outline-secondary" 
                                    @onclick="TogglePasswordVisibility"
                                    disabled="@isLoading"
                                    title="@(showPassword ? "Hide password" : "Show password")">
                                <i class="fas @(showPassword ? "fa-eye-slash" : "fa-eye")"></i>
                            </button>
                            <button type="button" 
                                    class="btn btn-outline-primary" 
                                    @onclick="GeneratePassword"
                                    disabled="@isLoading"
                                    title="Generate secure password">
                                <i class="fas fa-key"></i>
                            </button>
                            <button type="button" 
                                    class="btn btn-outline-success" 
                                    @onclick="CopyPassword"
                                    disabled="@(isLoading || string.IsNullOrEmpty(model.Password))"
                                    title="Copy password to clipboard">
                                <i class="fas fa-copy"></i>
                            </button>
                        </div>
                        <ValidationMessage For="@(() => model.Password)" class="validation-message" />
                        <small class="form-text text-muted">
                            At least 8 characters, with numbers and special characters.
                        </small>
                        @if (passwordStrength != null)
                        {
                            <div class="password-strength mt-2">
                                <div class="password-strength-bar">
                                    <div class="password-strength-fill @passwordStrength.CssClass" 
                                         style="width: @(passwordStrength.Score * 25)%"></div>
                                </div>
                                <small class="text-muted">Password strength: @passwordStrength.Label</small>
                            </div>
                        }
                    </div>

                    <div class="form-group">
                        <label for="confirmPassword" class="form-label">Confirm Password</label>
                        <InputText id="confirmPassword" 
                                  type="password"
                                  class="form-control" 
                                  @bind-Value="@confirmPassword" 
                                  placeholder="Repeat password"
                                  disabled="@isLoading" />
                        @if (!string.IsNullOrEmpty(confirmPassword) && confirmPassword != model.Password)
                        {
                            <span class="validation-message">Passwords do not match.</span>
                        }
                    </div>

                    <div class="form-group">
                        <button type="submit" 
                                class="btn btn-primary" 
                                disabled="@(isLoading || string.IsNullOrEmpty(model.Password) || confirmPassword != model.Password)">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span class="loading-text">Setting password...</span>
                            }
                            else
                            {
                                <i class="fas fa-save"></i>
                                <span>Reset Password</span>
                            }
                        </button>
                    </div>
                </EditForm>

                <div class="mt-4">
                    <a href="/login" class="btn btn-secondary">
                        <i class="fas fa-arrow-left"></i> Back to Login
                    </a>
                </div>
            }
        }
    </div>
</div>

@code {
    [Parameter]
    public string? Token { get; set; }

    private ResetPasswordResource model = new();
    private string confirmPassword = string.Empty;
    private string successMessage = string.Empty;
    private string errorMessage = string.Empty;
    private bool isLoading = false;
    private bool? isTokenValid = null;
    private bool showPassword = false;
    private PasswordStrength? passwordStrength;

    public class PasswordStrength
    {
        public int Score { get; set; }
        public string Label { get; set; } = string.Empty;
        public string CssClass { get; set; } = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Token))
        {
            isTokenValid = false;
            return;
        }

        model.Token = Token;

        try
        {
            isTokenValid = await Mediator.Send(new ValidatePasswordResetTokenQuery(Token));
        }
        catch
        {
            isTokenValid = false;
        }
    }

    private async Task HandleSubmit()
    {
        if (confirmPassword != model.Password)
        {
            errorMessage = "Passwords do not match.";
            return;
        }

        isLoading = true;
        errorMessage = string.Empty;
        
        try
        {
            var result = await Mediator.Send(new ResetPasswordCommand(model));
            
            if (result.Success)
            {
                successMessage = "Your password has been successfully reset. You can now log in with your new password.";
            }
            else
            {
                errorMessage = "Error resetting password. Please check your input or request a new link.";
                
                // Show specific validation errors if available
                if (result.ModelState != null)
                {
                    var errors = result.ModelState.Values
                        .SelectMany(v => v.Errors)
                        .Select(e => e.ErrorMessage)
                        .Where(e => !string.IsNullOrEmpty(e));
                    
                    if (errors.Any())
                    {
                        errorMessage = string.Join(" ", errors);
                    }
                }
            }
        }
        catch (Exception)
        {
            errorMessage = "An unexpected error occurred. Please try again later.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private void GeneratePassword()
    {
        try
        {
            model.Password = PasswordGenerator.GeneratePassword(14, true, true, true, true);
            confirmPassword = model.Password;
            UpdatePasswordStrength();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error generating password: {ex.Message}";
        }
    }

    private async Task CopyPassword()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", model.Password);
            // Could add a toast notification here
        }
        catch (Exception)
        {
            // Fallback for older browsers
            await JSRuntime.InvokeVoidAsync("fallbackCopyTextToClipboard", model.Password);
        }
    }

    private void UpdatePasswordStrength()
    {
        if (string.IsNullOrEmpty(model.Password))
        {
            passwordStrength = null;
            return;
        }

        var score = CalculatePasswordStrength(model.Password);
        passwordStrength = score switch
        {
            1 => new PasswordStrength { Score = 1, Label = "Very Weak", CssClass = "strength-very-weak" },
            2 => new PasswordStrength { Score = 2, Label = "Weak", CssClass = "strength-weak" },
            3 => new PasswordStrength { Score = 3, Label = "Fair", CssClass = "strength-fair" },
            4 => new PasswordStrength { Score = 4, Label = "Strong", CssClass = "strength-strong" },
            5 => new PasswordStrength { Score = 5, Label = "Very Strong", CssClass = "strength-very-strong" },
            _ => new PasswordStrength { Score = 0, Label = "Too Weak", CssClass = "strength-too-weak" }
        };
    }

    private static int CalculatePasswordStrength(string password)
    {
        var score = 0;
        
        if (password.Length >= 8) score++;
        if (password.Length >= 12) score++;
        if (password.Any(char.IsUpper)) score++;
        if (password.Any(char.IsLower)) score++;
        if (password.Any(char.IsDigit)) score++;
        if (password.Any(c => "!@#$%^&*()_+-=[]{}|;':\",./<>?".Contains(c))) score++;
        
        return Math.Min(score, 5);
    }

    protected override void OnParametersSet()
    {
        if (!string.IsNullOrEmpty(model.Password))
        {
            UpdatePasswordStrength();
        }
    }
}